<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[【转】腾讯面试题：一条 SQL 语句执行得很慢的原因有哪些？]]></title>
      <url>/2019/05/10/mysql/%E3%80%90%E8%BD%AC%E3%80%91%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E4%B8%80%E6%9D%A1%20SQL%20%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%97%E5%BE%88%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="【转】腾讯面试题：一条-SQL-语句执行得很慢的原因有哪些？"><a href="#【转】腾讯面试题：一条-SQL-语句执行得很慢的原因有哪些？" class="headerlink" title="【转】腾讯面试题：一条 SQL 语句执行得很慢的原因有哪些？"></a>【转】腾讯面试题：一条 SQL 语句执行得很慢的原因有哪些？</h2><p>转自文章链接：<a href="https://mp.weixin.qq.com/s/bAzEsUQBi02Tfuo-n0k_lA" target="_blank" rel="external">https://mp.weixin.qq.com/s/bAzEsUQBi02Tfuo-n0k_lA</a></p>
<p>帅地 <a href="javascript:void(0" target="_blank" rel="external">ImportNew</a>;) <em>前天</em></p>
<p>（给ImportNew加星标，提高Java技能）</p>
<blockquote>
<p>转自：苦逼的码农</p>
</blockquote>
<p>最近的招聘季，腾讯有一道面试题：一条SQL语句执行得很慢的原因有哪些？<br><a id="more"></a></p>
<p>其实，这个问题可以涉及到 MySQL 的很多核心知识，可以扯出一大堆，就像要考你计算机网络的知识时，问你“输入URL回车之后，究竟发生了什么”一样，看看你能说出多少了。</p>
<p>本文的作者就是这道面试题的亲历者，他尝试总结了一下：</p>
<p><strong>一、开始装逼：分类讨论</strong></p>
<p>一条 SQL 语句执行的很慢，那是每次执行都很慢呢？还是大多数情况下是正常的，偶尔出现很慢呢？所以我觉得，我们还得分以下两种情况来讨论。</p>
<ol>
<li>大多数情况是正常的，只是偶尔会出现很慢的情况。</li>
<li>在数据量不变的情况下，这条SQL语句一直以来都执行的很慢。</li>
</ol>
<p>针对这两种情况，我们来分析下可能是哪些原因导致的。</p>
<p><strong>二、针对偶尔很慢的情况</strong></p>
<p>一条 SQL 大多数情况正常，偶尔才能出现很慢的情况，针对这种情况，我觉得这条SQL语句的书写本身是没什么问题的，而是其他原因导致的，那会是什么原因呢？</p>
<p><strong>1、数据库在刷新脏页（flush）我也无奈啊</strong></p>
<p>当我们要往数据库插入一条数据、或者要更新一条数据的时候，我们知道数据库会在内存中把对应字段的数据更新了，但是更新之后，这些更新的字段并不会马上同步持久化到磁盘中去，而是把这些更新的记录写入到 redo log 日记中去，等到空闲的时候，在通过 redo log 里的日记把最新的数据同步到磁盘中去。</p>
<p>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。</p>
<p>刷脏页有下面4种场景（后两种不用太关注“性能”问题）：</p>
<ul>
<li>redolog写满了：redo log 里的容量是有限的，如果数据库一直很忙，更新又很频繁，这个时候 redo log 很快就会被写满了，这个时候就没办法等到空闲的时候再把数据同步到磁盘的，只能暂停其他操作，全身心来把数据同步到磁盘中去的，而这个时候，就会导致我们平时正常的SQL语句突然执行的很慢，所以说，数据库在在同步数据到磁盘的时候，就有可能导致我们的SQL语句执行的很慢了。</li>
<li>内存不够用了：如果一次查询较多的数据，恰好碰到所查数据页不在内存中时，需要申请内存，而此时恰好内存不足的时候就需要淘汰一部分内存数据页，如果是干净页，就直接释放，如果恰好是脏页就需要刷脏页。</li>
<li>MySQL 认为系统“空闲”的时候：这时系统没什么压力。</li>
<li>MySQL 正常关闭的时候：这时候，MySQL 会把内存的脏页都 flush 到磁盘上，这样下次 MySQL 启动的时候，就可以直接从磁盘上读数据，启动速度会很快。</li>
</ul>
<p><strong>2、拿不到锁我能怎么办</strong></p>
<p>这个就比较容易想到了，我们要执行的这条语句，刚好这条语句涉及到的表，别人在用，并且加锁了，我们拿不到锁，只能慢慢等待别人释放锁了。或者，表没有加锁，但要使用到的某个一行被加锁了，这个时候，我也没办法啊。</p>
<p>如果要判断是否真的在等待锁，我们可以用show processlist这个命令来查看当前的状态哦，这里我要提醒一下，有些命令最好记录一下，反正，我被问了好几个命令，都不知道怎么写，呵呵。</p>
<p>下来我们来访分析下第二种情况，我觉得第二种情况的分析才是最重要的</p>
<p><strong>三、针对一直都这么慢的情况</strong></p>
<p>如果在数据量一样大的情况下，这条 SQL 语句每次都执行的这么慢，那就就要好好考虑下你的 SQL 书写了，下面我们来分析下哪些原因会导致我们的 SQL 语句执行的很不理想。</p>
<p>我们先来假设我们有一个表，表里有下面两个字段,分别是主键 id，和两个普通字段 c 和 d。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE `t` (</div><div class="line">  `id` int(11) NOT NULL,</div><div class="line">  `c` int(11) DEFAULT NULL,</div><div class="line">  `d` int(11) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB;</div></pre></td></tr></table></figure>
<p><strong>1、扎心了，没用到索引</strong></p>
<p>没有用上索引，我觉得这个原因是很多人都能想到的，例如你要查询这条语句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="number">100</span> &lt;c <span class="keyword">and</span> c &lt; <span class="number">100000</span>;</div></pre></td></tr></table></figure>
<p><strong>(1)、字段没有索引</strong></p>
<p>刚好你的 c 字段上没有索引，那么抱歉，只能走全表扫描了，你就体验不会索引带来的乐趣了，所以，这回导致这条查询语句很慢。</p>
<p><strong>(2)、字段有索引，但却没有用索引</strong></p>
<p>好吧，这个时候你给 c 这个字段加上了索引，然后又查询了一条语句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> c - <span class="number">1</span> = <span class="number">1000</span>;</div></pre></td></tr></table></figure>
<p>我想问大家一个问题，这样子在查询的时候会用索引查询吗？</p>
<p>答是不会，如果我们在字段的左边做了运算，那么很抱歉，在查询的时候，就不会用上索引了，所以呢，大家要注意这种字段上有索引，但由于自己的疏忽，导致系统没有使用索引的情况了。</p>
<p>正确的查询应该如下</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> c = <span class="number">1000</span> + <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>有人可能会说，右边有运算就能用上索引？难道数据库就不会自动帮我们优化一下，自动把 c - 1=1000 自动转换为 c = 1000+1。</p>
<p>不好意思，确实不会帮你，所以，你要注意了。</p>
<p><strong>(3)、函数操作导致没有用上索引</strong></p>
<p>如果我们在查询的时候，对字段进行了函数操作，也是会导致没有用上索引的，例如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">pow</span>(c,<span class="number">2</span>) = <span class="number">1000</span>;</div></pre></td></tr></table></figure>
<p>这里我只是做一个例子，假设函数 pow 是求 c 的 n 次方，实际上可能并没有 pow(c,2)这个函数。其实这个和上面在左边做运算也是很类似的。</p>
<p>所以呢，一条语句执行都很慢的时候，可能是该语句没有用上索引了，不过具体是啥原因导致没有用上索引的呢，你就要会分析了，我上面列举的三个原因，应该是出现的比较多的吧。</p>
<p><strong>2、呵呵，数据库自己选错索引了</strong></p>
<p>我们在进行查询操作的时候，例如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> <span class="number">100</span> &lt; c <span class="keyword">and</span> c &lt; <span class="number">100000</span>;</div></pre></td></tr></table></figure>
<p>我们知道，主键索引和非主键索引是有区别的，主键索引存放的值是整行字段的数据，而非主键索引上存放的值不是整行字段的数据，而且存放主键字段的值。</p>
<p>也就是说，我们如果走 c 这个字段的索引的话，最后会查询到对应主键的值，然后，再根据主键的值走主键索引，查询到整行数据返回。</p>
<p>好吧扯了这么多，其实我就是想告诉你，就算你在 c 字段上有索引，系统也并不一定会走 c 这个字段上的索引，而是有可能会直接扫描扫描全表，找出所有符合 100 &lt; c and c &lt; 100000 的数据。</p>
<p><strong>为什么会这样呢？</strong></p>
<p>其实是这样的，系统在执行这条语句的时候，会进行预测：究竟是走 c 索引扫描的行数少，还是直接扫描全表扫描的行数少呢？显然，扫描行数越少当然越好了，因为扫描行数越少，意味着I/O操作的次数越少。</p>
<p>如果是扫描全表的话，那么扫描的次数就是这个表的总行数了，假设为 n；而如果走索引 c 的话，我们通过索引 c 找到主键之后，还得再通过主键索引来找我们整行的数据，也就是说，需要走两次索引。而且，我们也不知道符合 100 c &lt; and c &lt; 10000 这个条件的数据有多少行，万一这个表是全部数据都符合呢？这个时候意味着，走 c 索引不仅扫描的行数是 n，同时还得每行数据走两次索引。</p>
<p>所以呢，系统是有可能走全表扫描而不走索引的。那系统是怎么判断呢？</p>
<p>判断来源于系统的预测，也就是说，如果要走 c 字段索引的话，系统会预测走 c 字段索引大概需要扫描多少行。如果预测到要扫描的行数很多，它可能就不走索引而直接扫描全表了。</p>
<p>那么问题来了，系统是怎么预测判断的呢？这里我给你讲下系统是怎么判断的吧，虽然这个时候我已经写到脖子有点酸了。</p>
<p>系统是通过索引的区分度来判断的，一个索引上不同的值越多，意味着出现相同数值的索引越少，意味着索引的区分度越高。我们也把区分度称之为基数，即区分度越高，基数越大。所以呢，基数越大，意味着符合 100 &lt; c and c &lt; 10000 这个条件的行数越少。</p>
<p>所以呢，一个索引的基数越大，意味着走索引查询越有优势。</p>
<p>那么问题来了，怎么知道这个索引的基数呢？</p>
<p>系统当然是不会遍历全部来获得一个索引的基数的，代价太大了，索引系统是通过遍历部分数据，也就是通过采样的方式，来预测索引的基数的。</p>
<p>扯了这么多，重点的来了，居然是采样，那就有可能出现失误的情况，也就是说，c 这个索引的基数实际上是很大的，但是采样的时候，却很不幸，把这个索引的基数预测成很小。例如你采样的那一部分数据刚好基数很小，然后就误以为索引的基数很小。然后就呵呵，系统就不走 c 索引了，直接走全部扫描了。</p>
<p>所以呢，说了这么多，得出结论：由于统计的失误，导致系统没有走索引，而是走了全表扫描，而这，也是导致我们 SQL 语句执行的很慢的原因。</p>
<p>这里我声明一下，系统判断是否走索引，扫描行数的预测其实只是原因之一，这条查询语句是否需要使用使用临时表、是否需要排序等也是会影响系统的选择的。</p>
<p>不过呢，我们有时候也可以通过强制走索引的方式来查询，例如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">force</span> <span class="keyword">index</span>(a) <span class="keyword">where</span> c &lt; <span class="number">100</span> <span class="keyword">and</span> c &lt; <span class="number">100000</span>;</div></pre></td></tr></table></figure>
<p>我们也可以通过</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t;</div></pre></td></tr></table></figure>
<p>来查询索引的基数和实际是否符合，如果和实际很不符合的话，我们可以重新来统计索引的基数，可以用这条命令</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">analyze</span> <span class="keyword">table</span> t;</div></pre></td></tr></table></figure>
<p>来重新统计分析。</p>
<p>既然会预测错索引的基数，这也意味着，当我们的查询语句有多个索引的时候，系统有可能也会选错索引哦，这也可能是 SQL 执行的很慢的一个原因。</p>
<p>好吧，就先扯这么多了，你到时候能扯出这么多，我觉得已经很棒了，下面做一个总结。</p>
<p><strong>四、总结</strong></p>
<p>以上是我的总结与理解，最后一个部分，我怕很多人不大懂数据库居然会选错索引，所以我详细解释了一下，下面我对以上做一个总结。</p>
<p>一个 SQL 执行的很慢，我们要分两种情况讨论：</p>
<p>1、大多数情况下很正常，偶尔很慢，则有如下原因</p>
<p>(1)、数据库在刷新脏页，例如 redo log 写满了需要同步到磁盘。</p>
<p>(2)、执行的时候，遇到锁，如表锁、行锁。</p>
<p>2、这条 SQL 语句一直执行的很慢，则有如下原因。</p>
<p>(1)、没有用上索引：例如该字段没有索引；由于对字段进行运算、函数操作导致无法用索引。</p>
<p>(2)、数据库选错了索引</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
            <tag> 索引 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Cloud学习-服务注册与发现]]></title>
      <url>/2017/11/04/springcloud/Spring%20Cloud%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h1><p><strong>spring cloud 为开发人员提供了快速构建分布式系统的一些工具</strong>，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。<br><a id="more"></a></p>
<h1 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h1><p>这里我们需要选用Spring Cloud Netflix组件中的<code>Eureka</code></p>
<h2 id="创建一个spring-boot工程"><a href="#创建一个spring-boot工程" class="headerlink" title="创建一个spring boot工程"></a>创建一个spring boot工程</h2><p>选取<code>Eureka Server</code>,如下图</p>
<p><img src="http://oxrk6nknk.bkt.clouddn.com/eureka-server.jpg" alt="eureka-server"></p>
<p>创建好后，<code>pom.xml</code>中的主要依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="启用服务注册中心"><a href="#启用服务注册中心" class="headerlink" title="启用服务注册中心"></a>启用服务注册中心</h2><p>在spring boot应用主类中添加<code>@EnableEurekaServer</code>即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(EurekaServerApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置服务注册中心"><a href="#配置服务注册中心" class="headerlink" title="配置服务注册中心"></a>配置服务注册中心</h2><p>eureka是一个高可用的组件，<strong>它没有后端缓存</strong>，每一个实例注册之后需要向注册中心发送心跳（在内存中完成），在默认情况下erureka server也是一个eureka client ,它会将自己当成客户端去注册自己，所以我们需要禁用它的客户端注册行为。配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.application.name=eureka-server</div><div class="line">server.port=1001</div><div class="line">eureka.client.fetch-registry=false</div><div class="line">eureka.client.register-with-eureka=false</div><div class="line">eureka.client.service-url.defaultZone=http://localhost:$&#123;server.port&#125;/eureka</div></pre></td></tr></table></figure>
<p>通过 <code>eureka.client.registerWithEureka：false</code>和<code>fetchRegistry：false</code>来表明自己是一个eureka server.</p>
<h2 id="启动服务注册中心"><a href="#启动服务注册中心" class="headerlink" title="启动服务注册中心"></a>启动服务注册中心</h2><p>启动工程后，访问<code>http://localhost:1001/</code>，我们可以看到如下图：</p>
<p><img src="http://oxrk6nknk.bkt.clouddn.com/eureka-server-broswer.jpg" alt="服务注册中心"><br>可以看到下面的页面，其中还没有发现任何服务，因为我们还没有在注册中心注册服务。<br>下面我们开始创建服务提供者</p>
<h1 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h1><p>当client向server注册时，<strong>它会提供一些元数据，例如主机和端口，URL，主页等</strong>。Eureka server 从每个client实例接收心跳消息。 <strong>如果心跳超时，则通常将该实例从注册server中删除</strong>。</p>
<h2 id="创建一个spring-boot工程-1"><a href="#创建一个spring-boot工程-1" class="headerlink" title="创建一个spring boot工程"></a>创建一个spring boot工程</h2><p>选取<code>Eureka Discovery</code>，如图：</p>
<p><img src="http://oxrk6nknk.bkt.clouddn.com/service-hi.jpg" alt="service-hi"></p>
<p>创建好后，<code>pom.xml</code>中的主要依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="向服务注册中心注册"><a href="#向服务注册中心注册" class="headerlink" title="向服务注册中心注册"></a>向服务注册中心注册</h2><p>在spring boot主类上面添加注解<code>@EnableEurekaClient</code>，表明自己是一个eurekaclient，向服务注册中心注册自己。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHiApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ServiceHiApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h2><p>配置注册中心地址，向指定注册中心注册自己<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring.application.name=service-hi</div><div class="line">server.port=$&#123;random.int[1000,1100]&#125;</div><div class="line">eureka.client.service-url.defaultZone=http://localhost:1001/eureka/</div></pre></td></tr></table></figure></p>
<p><code>${random.int[1000,1100]}</code>随机端口生成，范围在1000-1100，我们启动多个服务时候可以不用修改端口号，再启动。<br><strong><code>注意</code></strong>:<code>http://localhost:1001/eureka/</code>，中的<code>eureka</code>是固定的，不能修改。</p>
<h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><p>浏览访问<code>http://localhost:1001/</code>，效果如下图：<br><img src="http://oxrk6nknk.bkt.clouddn.com/eureka-server-emergency.jpg" alt="eureka-server"><br>我们可以看到刚刚创建的service-hi，这个服务已经被注册到这个服务当中了，但是我们也看到了上面有警告信息，该警告是触发了Eureka Server的自我保护机制，可以使用<code>eureka.server.enable-self-preservation=false</code>来关闭eureka server保护机制，以确保注册中心可以将不可用的实例正确剔除。<br><code>eureka server自我保护机制</code>:Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%,Eureka Server会将当前实例注册信息保护起来，让这些实例不会过期，尽可能保护这些注册信息。但是，在这段保护期间内实例若出现问题，那么客户端很容易拿到实际已经不存在的服务实例，会出现调用失败的情况，所以客户端必须要有容错机制，比如使用请求重试、断路器等机制。</p>
<blockquote>
<p>参考文档<br><a href="http://blog.csdn.net/forezp/article/details/69696915" target="_blank" rel="external">史上最简单的 SpringCloud 教程 | 第一篇： 服务的注册与发现（Eureka）</a><br>      <a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a><br>      Spring Cloud微服务实战 </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> spring cloud </category>
            
        </categories>
        
        
        <tags>
            
            <tag> eureka </tag>
            
            <tag> spring cloud netflix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Dalston.SR3版本的spring cloud，用feign客户端调用服务hystrix不能生效的问题]]></title>
      <url>/2017/10/13/springcloud/%E5%85%B3%E4%BA%8EDalston.SR3%E7%89%88%E6%9C%AC%E7%9A%84spring%20cloud%EF%BC%8C%E7%94%A8feign%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1hystrix%E4%B8%8D%E8%83%BD%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这两天公司让学习spring cloud,我在项目中用的springcloud版本是Dalston.SR3版本。当我在学习用feign客户端做断路器的时候，发现feign客户端并没有降级去调用回调类，而抛出这样的错误。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.netflix.client.ClientException: Load balancer does not have available server for client: hello-service</div></pre></td></tr></table></figure></p>
<p>原因是这个版本的spring cloud是默认关闭Hystrix的断路器功能，解决办法：</p>
<ul>
<li>如果你的配置文件用的是yml文件，在文件加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">feign:</div><div class="line">  hystrix:</div><div class="line">    enabled: true</div></pre></td></tr></table></figure>
<ul>
<li>如果你的配置文件用的是properties文件，在文件加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">feign.hystrix.enabled=true</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> spring cloud </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> dalston sr3 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
